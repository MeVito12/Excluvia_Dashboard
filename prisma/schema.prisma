// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  name             String
  businessCategory String   @map("business_category")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  products     Product[]
  clients      Client[]
  appointments Appointment[]
  sales        Sale[]
  campaigns    LoyaltyCampaign[]
  whatsappChats WhatsAppChat[]

  @@map("users")
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  category          String
  sku               String?
  stock             Int       @default(0)
  minStock          Int       @default(5) @map("min_stock")
  price             Decimal   @db.Decimal(10, 2)
  isPerishable      Boolean   @default(false) @map("is_perishable")
  manufacturingDate DateTime? @map("manufacturing_date") @db.Date
  expiryDate        DateTime? @map("expiry_date") @db.Date
  businessCategory  String    @map("business_category")
  userId            Int       @map("user_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  stockMovements StockMovement[]

  @@map("products")
}

model Client {
  id               Int       @id @default(autoincrement())
  name             String
  email            String?
  phone            String?
  address          String?
  businessCategory String    @map("business_category")
  totalSpent       Decimal   @default(0) @db.Decimal(10, 2) @map("total_spent")
  lastPurchase     DateTime? @map("last_purchase")
  isActive         Boolean   @default(true) @map("is_active")
  notes            String?
  userId           Int       @map("user_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  sales Sale[]

  @@map("clients")
}

model Appointment {
  id               Int      @id @default(autoincrement())
  title            String
  clientName       String   @map("client_name")
  date             DateTime @db.Date
  time             String
  type             String
  status           String   @default("agendado")
  notes            String?
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model Sale {
  id               Int      @id @default(autoincrement())
  productName      String   @map("product_name")
  quantity         Int
  unitPrice        Decimal  @db.Decimal(10, 2) @map("unit_price")
  totalAmount      Decimal  @db.Decimal(10, 2) @map("total_amount")
  paymentMethod    String   @map("payment_method")
  businessCategory String   @map("business_category")
  clientId         Int?     @map("client_id")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@map("sales")
}

model LoyaltyCampaign {
  id               Int      @id @default(autoincrement())
  name             String
  description      String
  discountType     String   @map("discount_type")
  discountValue    Decimal  @db.Decimal(5, 2) @map("discount_value")
  startDate        DateTime @map("start_date") @db.Date
  endDate          DateTime @map("end_date") @db.Date
  isActive         Boolean  @default(true) @map("is_active")
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("loyalty_campaigns")
}

model Reminder {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String
  date      DateTime @db.Date
  time      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reminders")
}

model WhatsAppChat {
  id               Int      @id @default(autoincrement())
  contactName      String   @map("contact_name")
  lastMessage      String   @map("last_message")
  lastActivity     DateTime @map("last_activity")
  unreadCount      Int      @default(0) @map("unread_count")
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("whatsapp_chats")
}

model StockMovement {
  id           Int      @id @default(autoincrement())
  productId    Int      @map("product_id")
  movementType String   @map("movement_type")
  quantity     Int
  reason       String?
  movementDate DateTime @default(now()) @map("movement_date")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model IntegrationSettings {
  id               Int      @id @default(autoincrement())
  name             String
  type             String
  isActive         Boolean  @default(false) @map("is_active")
  config           String   @db.Text
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("integration_settings")
}

model NotificationSettings {
  id               Int      @id @default(autoincrement())
  type             String
  email            Boolean  @default(false)
  telegram         Boolean  @default(false)
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("notification_settings")
}

model BotConfig {
  id               Int      @id @default(autoincrement())
  name             String
  isActive         Boolean  @default(true) @map("is_active")
  responseType     String   @map("response_type")
  config           String   @db.Text
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("bot_configs")
}

model SupportAgent {
  id               Int      @id @default(autoincrement())
  name             String
  email            String
  phone            String?
  isActive         Boolean  @default(true) @map("is_active")
  businessCategory String   @map("business_category")
  userId           Int      @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("support_agents")
}